function varargout = Color_Conversion(varargin)
% COLOR_CONVERSION MATLAB code for Color_Conversion.fig
%      COLOR_CONVERSION, by itself, creates a new COLOR_CONVERSION or raises the existing
%      singleton*.
%
%      H = COLOR_CONVERSION returns the handle to a new COLOR_CONVERSION or the handle to
%      the existing singleton*.
%
%      COLOR_CONVERSION('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in COLOR_CONVERSION.M with the given input arguments.
%
%      COLOR_CONVERSION('Property','Value',...) creates a new COLOR_CONVERSION or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before Color_Conversion_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to Color_Conversion_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help Color_Conversion

% Last Modified by GUIDE v2.5 19-Nov-2016 16:44:46

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
    'gui_Singleton',  gui_Singleton, ...
    'gui_OpeningFcn', @Color_Conversion_OpeningFcn, ...
    'gui_OutputFcn',  @Color_Conversion_OutputFcn, ...
    'gui_LayoutFcn',  [] , ...
    'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before Color_Conversion is made visible.
function Color_Conversion_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to Color_Conversion (see VARARGIN)

% Choose default command line output for Color_Conversion
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);
movegui(hObject,'center');

% UIWAIT makes Color_Conversion wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = Color_Conversion_OutputFcn(hObject, eventdata, handles)
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on button press in pushbutton1.
function pushbutton1_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

[filename,pathname] = uigetfile({'*.jpg';'*.*'},'Ambil Gambar');  



set(handles.axes1,'XTickLabel','','YTickLabel','');

colormap(gray) 

if ~isequal(filename,0)
    Img = imread(fullfile(pathname,filename));
    info = imfinfo(fullfile(pathname,filename));
    bitdepth = info.BitDepth;
    if bitdepth ==24
        axes(handles.axes1)
        imshow(Img)
        set(handles.popupmenu1,'enable','on')
        set(handles.popupmenu1,'Value',1)
        imagesc(ambilFoto) ;
    else
        errordlg('Image must be RGB','File Error');
    end
else
    return
end

handles.Img = Img;
guidata(hObject, handles);


% --- Executes on selection change in popupmenu1.
function popupmenu1_Callback(hObject, eventdata, handles)
% hObject    handle to popupmenu1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns popupmenu1 contents as cell array
%        contents{get(hObject,'Value')} returns selected item from popupmenu1
Img = handles.Img;
val = get(hObject,'Value');

switch val
    case 1
        axes(handles.axes1)
        imshow(Img)
        R = Img(:,:,1);
        axes(handles.axes2)
        imshow(R)
        axes(handles.axes5)
        imhist(R)
        G = Img(:,:,2);
        axes(handles.axes3)
        imshow(G)
        axes(handles.axes6)
        imhist(G)
        B = Img(:,:,3);
        axes(handles.axes4)
        imshow(B)
        axes(handles.axes7)
        imhist(B)
    case 2
        HSV = rgb2hsv(Img);
        axes(handles.axes1)
        imshow(HSV)
        H = HSV(:,:,1);
        axes(handles.axes2)
        imshow(H)
        axes(handles.axes5)
        imhist(H)
        S = HSV(:,:,2);
        axes(handles.axes3)
        imshow(S)
        axes(handles.axes6)
        imhist(S)
        V = HSV(:,:,3);
        axes(handles.axes4)
        imshow(V)
        axes(handles.axes7)
        imhist(V)
    case 3
        NTSC = rgb2ntsc(Img);
        axes(handles.axes1)
        imshow(NTSC)
        Y = NTSC(:,:,1);
        axes(handles.axes2)
        imshow(Y)
        axes(handles.axes5)
        imhist(Y)
        I = NTSC(:,:,2);
        axes(handles.axes3)
        imshow(I)
        axes(handles.axes6)
        imhist(I)
        Q = NTSC(:,:,3);
        axes(handles.axes4)
        imshow(Q)
        axes(handles.axes7)
        imhist(Q)
    case 4
        YCbCr = rgb2ycbcr(Img);
        axes(handles.axes1)
        imshow(YCbCr)
        Y = YCbCr(:,:,1);
        axes(handles.axes2)
        imshow(Y)
        axes(handles.axes5)
        imhist(Y)
        Cb = YCbCr(:,:,2);
        axes(handles.axes3)
        imshow(Cb)
        axes(handles.axes6)
        imhist(Cb)
        Cr = YCbCr(:,:,3);
        axes(handles.axes4)
        imshow(Cr)
        axes(handles.axes7)
        imhist(Cr)
    case 5
        Grayscale = rgb2gray(Img);
        axes(handles.axes1)
        imshow(Grayscale)
        G1 = Grayscale(:,:,1);
        axes(handles.axes2)
        imshow(G1)
        axes(handles.axes5)
        imhist(G1)
        Re = Grayscale(:,:,2);
        axes(handles.axes3)
        imshow(Re)
        axes(handles.axes6)
        imhist(Re)
        Ey = Grayscale(:,:,3);
        axes(handles.axes4)
        imshow(Ey)
        axes(handles.axes7)
        imhist(Ey)
end

% --- Executes during object creation, after setting all properties.
function popupmenu1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to popupmenu1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- If Enable == 'on', executes on mouse press in 5 pixel border.
% --- Otherwise, executes on mouse press in 5 pixel border or over popupmenu1.
function popupmenu1_ButtonDownFcn(hObject, eventdata, handles)
% hObject    handle to popupmenu1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in pushbutton2.
function pushbutton2_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
untitled ut = new untitled();
ut.show();



function edit2_Callback(hObject, eventdata, handles)
% hObject    handle to edit2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit2 as text
%        str2double(get(hObject,'String')) returns contents of edit2 as a double


% --- Executes during object creation, after setting all properties.
function edit2_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit1_Callback(hObject, eventdata, handles)
% hObject    handle to edit1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit1 as text
%        str2double(get(hObject,'String')) returns contents of edit1 as a double


% --- Executes during object creation, after setting all properties.
function edit1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in pushbutton3.
function pushbutton3_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

n(1) = 10 ;
n(2) = 10 ;

load mu.mat ;
load sigma.mat ;


 ambilcabe = getimage(handles.axes1);
 
  %  FimageBA = strcat('dataTesting\BaksoAyam\',int2str(i),'.jpg') ;
   % FimageBS = strcat('dataTesting\BaksoSapi\',int2str(i),'.jpg') ;
    
    %% Olah Bakso 
   
    imagecabeGray = rgb2gray(ambilcabe) ;
    
    [p,g] = size(imagecabeGray) ;
    imagecabeVektor = reshape(imagecabeGray,1,p*g) ;
    x_barcabe = mean(imagecabeVektor) ;
    %% Implementasi pada Fungsi Diskriminan
    
    [gjx_cabe]= GJ(miu,sigmah,n,x_barcabe); 
    [gjv_cabe,c_cabe] = max(gjx_cabe) ;
    cDeteksi_cabe = c_cabe ; 
    
    %cDeteksi_Bakso
    
    cabebaru = 'Cabe masih bagus dikonsumsi' ;
    cabelama = 'Cabe tidak layak konsumsi' ;
    cabeNihil = 'Tidak Terdeteksi' ;
    
    if cDeteksi_Bakso == 1 
        set(handles.hasil,'String', cabebaru) ;
        ambilFoto = imread('cabebaru.jpg');
        set(handles.axes10,'HandleVisibility','ON') ;
        set(handles.axes1,'HandleVisibility','OFF') ;   
        imagesc(ambilFoto) ;
        set(handles.axes10,'XTickLabel','','YTickLabel','');
        colormap(gray) 

    elseif cDeteksi_Bakso == 2 
        set(handles.hasil,'String', cabelama) ;
        
        ambilFotoh = imread('cabelama.jpg');
        set(handles.axes10,'HandleVisibility','ON') ;
        set(handles.axes1,'HandleVisibility','OFF') ;   
        imagesc(ambilFotoh) ;
        set(handles.axes10,'XTickLabel','','YTickLabel','');
        colormap(gray)
    else
         set(handles.hasil,'String', BaksoNihil) ;
          set(handles.axes2,'HandleVisibility','OFF') ;
         set(handles.axes1,'HandleVisibility','OFF') ;  
    end
        cDeteksi_cabe
    clear 



function edit5_Callback(hObject, eventdata, handles)
% hObject    handle to edit5 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit5 as text
%        str2double(get(hObject,'String')) returns contents of edit5 as a double


% --- Executes during object creation, after setting all properties.
function edit5_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit5 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in pushbutton8.
function pushbutton8_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton8 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in pushbutton9.
function pushbutton9_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton9 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)



function edit6_Callback(hObject, eventdata, handles)
% hObject    handle to edit6 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit6 as text
%        str2double(get(hObject,'String')) returns contents of edit6 as a double


% --- Executes during object creation, after setting all properties.
function edit6_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit6 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
